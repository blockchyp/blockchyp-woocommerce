'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockChypTokenizer = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _jsBase = require('js-base64');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BlockChypTokenizer = exports.BlockChypTokenizer = function () {
  function BlockChypTokenizer() {
    (0, _classCallCheck3.default)(this, BlockChypTokenizer);

    this.gatewayHost = 'https://api.blockchyp.com';
    this.testGatewayHost = 'https://test.blockchyp.com';
    this.defaultTimeout = 60;
    this.inputDiv = null;
    this.valid = false;
  }

  (0, _createClass3.default)(BlockChypTokenizer, [{
    key: 'setGatewayHost',
    value: function setGatewayHost(host) {
      this.gatewayHost = host;
    }
  }, {
    key: 'setTestGatewayHost',
    value: function setTestGatewayHost(host) {
      this.testGatewayHost = host;
    }
  }, {
    key: '_getGatewayConfig',
    value: function _getGatewayConfig(tokenizingKey) {
      var config = {};
      config['headers'] = {
        'Authorization': 'Tokenizing-Key ' + tokenizingKey
      };
      return config;
    }
  }, {
    key: 'isValid',
    value: function isValid() {
      return this.valid;
    }
  }, {
    key: 'render',
    value: function render(tokenizingKey, test, divId, options) {
      var self = this;
      this.inputDiv = divId;
      var inputDiv = document.getElementById(divId);
      inputDiv.setAttribute('style', 'margin: 0; padding: 0;');
      var bcFrame = document.createElement('iframe');
      bcFrame.setAttribute('style', 'margin: 0; padding: 0;');
      bcFrame.setAttribute('id', 'blockchypSecureInput');
      bcFrame.setAttribute('frameBorder', '0');
      bcFrame.setAttribute('scrolling', 'no');
      bcFrame.setAttribute('width', '100%');
      if (options && options.height) {
        bcFrame.setAttribute('height', options.height);
      } else {
        bcFrame.setAttribute('height', '36px');
      }

      var src = '';

      if (test) {
        src = this.testGatewayHost;
      } else {
        src = this.gatewayHost;
      }
      src = src + '/secure-input?key=' + tokenizingKey;
      if (options) {
        // encode options
        var optionsEncoded = _jsBase.Base64.encode(JSON.stringify(options));
        src = src + '&options=' + optionsEncoded;
      }
      src = src + '&origin=' + encodeURI(window.location.href);
      bcFrame.setAttribute('src', src);
      inputDiv.appendChild(bcFrame);
      if (document.getElementById(divId + '-error')) {
        var errorDiv = document.getElementById(divId + '-error');
        errorDiv.style.display = 'none';
      }
      window.addEventListener('message', function (event) {
        if (event.data['message']) {
          switch (event.data['message']) {
            case 'validate':
              var inputDiv = document.getElementById(divId);
              var errorDiv = document.getElementById(self.inputDiv + '-error');
              if (event.data['valid']) {
                self.valid = true;
                inputDiv.style['border-color'] = null;
                errorDiv.style.display = 'none';
              } else {
                self.valid = false;
                inputDiv.style['border-color'] = 'red';
                errorDiv.style.display = 'block';
                errorDiv.innerText = event.data.error;
              }
          }
        }
      });
    }
  }, {
    key: 'tokenize',
    value: function tokenize(tokenizingKey, request) {
      var url = '';
      var self = this;
      if (request.test) {
        url = self.testGatewayHost;
      } else {
        url = self.gatewayHost;
      }
      if (document.getElementById('blockchypSecureInput')) {
        var errorDiv = document.getElementById(self.inputDiv + '-error');
        errorDiv.style.display = 'none';
        var promise = new Promise(function (resolve, reject) {
          window.addEventListener('message', function (event) {
            if (!event.data['message']) {
              console.log('Response: ' + JSON.stringify(event));
              if (!event.data.success) {
                if (document.getElementById(self.inputDiv + '-error')) {
                  var errorDiv = document.getElementById(self.inputDiv + '-error');
                  errorDiv.style.display = 'block';
                  errorDiv.innerText = event.data.responseDescription;
                }
              }
              resolve(event);
            }
          });
          request['origin'] = window.location.href;
          document.getElementById('blockchypSecureInput').contentWindow.postMessage(request, url);
        });
        return promise;
      } else {
        url = url + '/api/tokenize';
        return _axios2.default.post(url, request, self._getGatewayConfig(tokenizingKey));
      }
    }
  }]);
  return BlockChypTokenizer;
}();

var Tokenizer = new BlockChypTokenizer();
exports.default = Tokenizer;